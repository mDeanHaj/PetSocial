<%- include("partials/header.ejs") %>

<div class="explore-container">
  <h1 class="explore-title">Explore Nearby Pet-Friendly Locations</h1>

  <!-- ZIP Code and Search Type Input Section -->
  <div class="zip-code-input">
    <input
      type="text"
      id="zip-code"
      placeholder="Enter ZIP Code"
      maxlength="5"
    />
    <input
      type="text"
      id="search-type"
      placeholder="Enter Location Type (e.g., Pet Store)"
    />
    <button onclick="goToZipAndSearch()">Search</button>
  </div>

  <!-- Map Container -->
  <div id="map"></div>
</div>

<script src="https://api.mapbox.com/mapbox-gl-js/v2.13.0/mapbox-gl.js"></script>
<script>
  mapboxgl.accessToken =
    "pk.eyJ1IjoicnNhcnBhczIiLCJhIjoiY20zZXNzaDF0MDl3aTJqcHVtdHZhc2lucSJ9.oTPxQ1EEPT_7hSbKY4DJkg";

  const map = new mapboxgl.Map({
  container: "map", // Ensure this matches your HTML element ID
  style: "mapbox://styles/mapbox/streets-v11",
  center: [-118.2437, 34.0522], // Default coordinates (e.g., Los Angeles)
  zoom: 10, // Default zoom level
});


  const markers = [];

  async function goToZipAndSearch() {
    const zipCode = document.getElementById("zip-code").value;
    const searchType = document.getElementById("search-type").value.trim().toLowerCase();

    if (!zipCode || zipCode.length !== 5) {
      alert("Please enter a valid ZIP code.");
      return;
    }

    try {
      // Use Mapbox Geocoding API to fetch coordinates for the ZIP code
      const geocodeUrl = `https://api.mapbox.com/geocoding/v5/mapbox.places/${zipCode}.json?access_token=${mapboxgl.accessToken}`;
      const geocodeResponse = await fetch(geocodeUrl);
      const geocodeData = await geocodeResponse.json();

      if (geocodeData.features && geocodeData.features.length > 0) {
        const [longitude, latitude] = geocodeData.features[0].center;

        // Center the map on the ZIP code
        map.flyTo({
          center: [longitude, latitude],
          zoom: 12,
        });

        // Fetch locations based on the search type and coordinates
        await fetchAndAddMarkers(searchType, latitude, longitude);
      } else {
        alert("Location not found. Please try another ZIP code.");
      }
    } catch (error) {
      console.error("Error fetching ZIP code location:", error);
      alert("Unable to locate the ZIP code. Please try again.");
    }
  }

  async function fetchAndAddMarkers(type, lat, lon) {
  // Clear existing markers
  markers.forEach((marker) => marker.remove());
  markers.length = 0;

  try {
    // Fetch location data using the Mapbox Geocoding API
    const searchUrl = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(type)}.json?proximity=${lon},${lat}&access_token=${mapboxgl.accessToken}`;
    const response = await fetch(searchUrl);
    const data = await response.json();

    if (data.features && data.features.length > 0) {
      data.features.forEach((location) => {
        const [longitude, latitude] = location.center;

        // Add a marker to the map
        const marker = new mapboxgl.Marker()
          .setLngLat([longitude, latitude]) // Correctly set marker position
          .setPopup(
            new mapboxgl.Popup({ offset: 25 }).setHTML(
              `<strong>${location.text}</strong><br>${location.place_name}`
            )
          )
          .addTo(map); // Attach marker to the Mapbox map

        markers.push(marker);
      });
    } else {
      alert("No locations found for the specified search type.");
    }
  } catch (error) {
    console.error("Error fetching locations:", error);
    alert("Unable to fetch locations. Please try again.");
  }
}


  // Initialize the map with no markers
  map.on("load", () => {
    console.log("Map loaded and ready for searches.");
  });
</script>
<br/><br/><br/><br/><br/><br/>

<%- include("partials/footer.ejs") %>
</body>
</html>